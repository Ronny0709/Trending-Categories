from googleapiclient.discovery import build
from datetime import datetime
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import re

# API key
api_key = 'YOUR API KEY'

# Build the YouTube service
youtube = build('youtube', 'v3', developerKey=api_key)

def get_trending_videos(region_code='countrycode', max_results=50):
    # Request to get trending videos
    request = youtube.videos().list(
        part="snippet,contentDetails,statistics",
        chart="mostPopular",
        regionCode=region_code,
        maxResults=max_results
    )
    response = request.execute()
    
    return response 

def channel_info(idstr):
    # Request to get trending videos
    request = youtube.channels().list(
        part="brandingSettings,statistics",
        id = idstr  #cannot be run in order
        )
    response = request.execute()
    return response

def duration_category(duration_input):
    time_sec = int(pd.Timedelta(duration_input).total_seconds())
    categories = [(60, "< 1min"),(300, "1~5min"),(600, "5~10min"),(1800, "10~30min"),(3600, "30~60min"),(36000, "1~10hrs")]
    
    for limit, category in categories:
        if time_sec <= limit:
            return category
    return "> 10hrs"
    
def dat_format(date_input):
    date_form = datetime.strptime(date_input, '%Y-%m-%dT%H:%M:%SZ').date()
    return date_form

def response_to_df(input1,input2):
    video_ids, titles, durations, views, channel_titles, like_counts, category_ids,tags_list, upload_dates, comment_counts,channel_total_view,channel_subscriber,channel_vids, channel_keywords = ([] for _ in range(14))
    for item in input1['items']:
        video_ids.append(item['id'])
        titles.append((re.sub(r'[^\u3040-\u30FF\u4E00-\u9FFFa-zA-Z0-9\u1100-\u11FF\u3130-\u318F\uAC00-\uD7AF ]', '',item['snippet']['title'])))
        durations.append(duration_category(item['contentDetails']['duration']))
        views.append(int(item['statistics']['viewCount']))
        category_ids.append(category_id_list[item['snippet']['categoryId']])    #convert category id into category name
        channel_titles.append(item['snippet']['channelTitle'])
        like_counts.append(item['statistics'].get('likeCount', None))
        upload_dates.append(dat_format(item['snippet']['publishedAt']))
        comment_counts.append(item['statistics'].get('commentCount', None))
        tags = item['snippet'].get('tags', []) + re.findall(r"#(\w+)",item['snippet']['description'])
        tags_list.append(None if tags == [] else tags)
    
    for i in range(50):
        for ch_info in input2[i]['items']:
            channel_total_view.append(int(ch_info['statistics']['viewCount']))
            channel_subscriber.append(int(ch_info['statistics']['subscriberCount']))
            channel_vids.append(int(ch_info['statistics']['videoCount']))
            keyword = ch_info['brandingSettings']['channel'].get('keywords', '')
            channel_keywords.append([j for j in re.sub(r'[^\u3040-\u30FF\u4E00-\u9FFFa-zA-Z0-9\u1100-\u11FF\u3130-\u318F\uAC00-\uD7AFã€€]',',',keyword).split(',') if j]if keyword else None)
            
    data = {
        'Video ID':                 video_ids,
        'Title':                    titles,
        'Category' :                category_ids,
        'Views' :                   views,
        'Duration':                 durations,
        'Likes':                    like_counts,
        'Comments':                 comment_counts,
        'Uploaded Date':            upload_dates,
        'Tags':                     tags_list,
        'Channel Title':            channel_titles,
        'Channel Total View':       channel_total_view,
        'Channel Subscribers':      channel_subscriber,
        'Channel Video':            channel_vids,
        'Channel Keywords':         channel_keywords
    }
    
    return pd.DataFrame(data)


category_id_list = {
    "1": "Film & Animation", "2": "Autos & Vehicles", "10": "Music", "15": "Pets & Animals", "17": "Sports", "18": "Short Movies",
    "19": "Travel & Events", "20": "Gaming", "21": "Videoblogging", "22": "People & Blogs","23": "Comedy", "24": "Entertainment",
    "25": "News & Politics", "26": "Howto & Style", "27": "Education", "28": "Science & Technology", "30": "Movies", "31": "Anime/Animation",
    "32": "Action/Adventure", "33": "Classics", "34": "Comedy", "35": "Documentary", "36": "Drama", "37": "Family", "38": "Foreign",
    "39": "Horror", "40": "Sci-Fi/Fantasy", "41": "Thriller", "42": "Shorts", "43": "Shows", "44": "Trailers"
    }

# Get trending video
jpresponse = get_trending_videos(region_code='JP', max_results=50)
krresponse = get_trending_videos(region_code='KR', max_results=50)

# Get trending video channel info
krchannelidlist = [krresponse['items'][i]['snippet']['channelId'] for i in range(50)] 
jpchannelidlist = [jpresponse['items'][i]['snippet']['channelId'] for i in range(50)] 
krchannelinfo = [channel_info(i) for i in krchannelidlist]
jpchannelinfo = [channel_info(i) for i in jpchannelidlist]

# Merge info to dataset
krdf = response_to_df(krresponse,krchannelinfo)
jpdf = response_to_df(jpresponse,jpchannelinfo)


# Convert to csv
today = datetime.now().date().strftime('%Y-%m-%d')
krdf.to_csv(f'/Users/ronny/Code/Project2/kr_server/kr{today}.csv', index=False)
jpdf.to_csv(f'/Users/ronny/Code/Project2/jp_server/jp{today}.csv', index=False)



#trend graph for each server
category_countskr = krdf['Category'].value_counts()
category_countsjp = jpdf['Category'].value_counts()
all_categories = category_countskr.combine_first(category_countsjp).index

category_countskr = category_countskr.reindex(all_categories, fill_value=0)
category_countsjp = category_countsjp.reindex(all_categories, fill_value=0)
index = np.arange(len(all_categories))

plt.rcParams["font.family"] = "DejaVu Serif"
plt.figure(figsize=(10, 4))
plt.bar(index - 0.2, category_countskr.values, width=0.4, label='KR server',color = 'rosybrown')
plt.bar(index + 0.2, category_countsjp.values, width=0.4, label='JP server',color = 'steelblue')
plt.xlabel('Category')
plt.ylabel('Number of Videos')
plt.title('Number of Videos per Category')
plt.xticks(index, all_categories, rotation=30, ha='right')
plt.legend()
plt.savefig(f'/Users/ronny/Code/Project2/category_graph/{today}_category.png',bbox_inches = 'tight')

category_countskr = krdf['Duration'].value_counts()
category_countsjp = jpdf['Duration'].value_counts()

#trend graph for each server
desired_order = ["< 1min", "1~5min", "5~10min", "10~30min", "30~60min", "1~10hrs"]
category_countskr = category_countskr.reindex(desired_order, fill_value=0)
category_countsjp = category_countsjp.reindex(desired_order, fill_value=0)
index = np.arange(len(desired_order))
plt.figure(figsize=(10, 4))
plt.bar(index - 0.2, category_countskr.values, width=0.4, label='KR server',color = 'rosybrown')
plt.bar(index + 0.2, category_countsjp.values, width=0.4, label='JP server',color = 'steelblue')
plt.xlabel('Duration')
plt.ylabel('Number of Videos')
plt.title('Duration of Each Videos')
plt.xticks(index, desired_order, rotation=30, ha='right')
plt.legend()
plt.savefig(f'/Users/ronny/Code/Project2/vidlength_graph/{today}_vidlength.png',bbox_inches = 'tight')
